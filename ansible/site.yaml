---
- name: Bootstrap HTTPS and SSL enabled Wordpress Website 
  hosts: docker.otraw
  user: "{{ username }}"
  become: true
  gather_facts: False

  tasks:
  - name: Update yum packages
    ansible.builtin.yum:
      name: '*'
      update_only: true
      update_cache: true

  - name: Install Docker
    ansible.builtin.yum:
      name: "docker-{{ docker_version }}"
      state: present

  - name: Enable and Start docker
    ansible.builtin.systemd:
      name: docker.service
      state: started
      enabled: true

  - name: Add the user to the docker group
    ansible.builtin.user:
      name: "{{ username }}"
      group: docker
      append: yes

  - name: Install docker-compose
    ansible.builtin.uri:
      url: "https://github.com/docker/compose/releases/download/{{docker_compose_version}}/docker-compose-linux-x86_64"
      status_code:
        - 200
        - 304
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: 755
      dest: /usr/local/bin/docker-compose

  - name: Copy script for securing the docker daemon with TLS
    ansible.builtin.copy:
      src: docker_tls_certs.sh
      dest: "/home/{{ username }}"
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: '755'

  - name: Execute script
    ansible.builtin.pause:
      prompt: "SSH to the remote host and execute the script to generate tls certs"

  - name: Change dir ownership of generated tls certs
    ansible.builtin.file:
      path: "/home/{{ username }}/.docker"
      owner: root
      group: root
      recurse: yes
    register: change_ownership_tls_dir

  - name: Overide docker service file with tls verification options enabled
    ansible.builtin.copy:
      src: override.conf
      dest: "/etc/systemd/system/docker.service.d/"
      owner: root
      group: root
      mode: '600'
    register: override_docker_systemd

  - name: Restart Docker
    ansible.builtin.systemd:
      name: docker.service
      daemon_reload: true
      state: restarted
    when: override_docker_systemd.changed

  - name: Copy client certificates to local machine
    ansible.builtin.fetch:
      src: "{{ item }}"
      dest: ~/.docker/
      flat: yes
    loop: #use with_items instead of loop if ansible version is <2.5
      - "/home/{{ username }}/.docker/ca.pem"
      - "/home/{{ username }}/.docker/cert.pem"
      - "/home/{{ username }}/.docker/key.pem"
    when: change_ownership_tls_dir.changed

  - name: Create and start lemp stack (nginx, mysql, wordpress)
    community.docker.docker_compose:
      docker_host: "{{ docker_host }}"
      ca_cert: "{{ ca_cert }}"
      client_cert: "{{ client_cert }}"
      client_key: "{{ client_key }}"
      project_name: "otraw"
      project_src: "../docker/lemp_stack/"
      build: true
      tls: true
      validate_certs: true
      state: present
    delegate_to: localhost

  - name: Request staging letsencrypt certificates
    community.docker.docker_container:
      docker_host: "{{ docker_host }}"
      ca_cert: "{{ ca_cert }}"
      client_cert: "{{ client_cert }}"
      client_key: "{{ client_key }}"
      tls: true
      validate_certs: true
      name: certbot-staging
      image: certbot/certbot:v2.4.0
      command: "certonly --webroot --webroot-path=/var/www/html --email {{ certbot_email }} --agree-tos --no-eff-email --staging -d {{ domain }} -d www.{{ domain }}"
      volumes:
        - otraw_certbot-etc:/etc/letsencrypt
        - otraw_wordpress:/var/www/html
      networks:
        - name: otraw_app-network
    delegate_to: localhost

  - name: Waiting for staging certifcates to be applied
    ansible.builtin.pause:
      seconds: 20
  
  - name: Enable HTTPS and SSL on nginx webserver
    community.docker.docker_container_exec:
      docker_host: "{{ docker_host }}"
      ca_cert: "{{ ca_cert }}"
      client_cert: "{{ client_cert }}"
      client_key: "{{ client_key }}"
      tls: true
      validate_certs: true
      container: webserver
      # detach: true
      command: /bin/sh -c "/app/scripts/enable_ssl_and_https.sh"
    delegate_to: localhost

  - name: Wait for nginx to reload
    ansible.builtin.pause:
      seconds: 10

  - name: Request prod letsencrypt certificates #Comment this out when not required to avoid hitting rate limits
    community.docker.docker_container:
      docker_host: "{{ docker_host }}"
      ca_cert: "{{ ca_cert }}"
      client_cert: "{{ client_cert }}"
      client_key: "{{ client_key }}"
      tls: true
      validate_certs: true
      name: certbot-prod
      image: certbot/certbot:v2.4.0
      command: "certonly --webroot --webroot-path=/var/www/html --email {{ certbot_email }} --agree-tos --no-eff-email --force-renewal -d {{ domain }} -d www.{{ domain }}"
      volumes:
        - otraw_certbot-etc:/etc/letsencrypt
        - otraw_wordpress:/var/www/html
      networks:
        - name: otraw_app-network
    delegate_to: localhost

  - name: Waiting for prod certifcates to be applied
    ansible.builtin.pause:
      seconds: 20

  - name: Recreate nginx webserver to apply new config
    community.docker.docker_compose:
      docker_host: "{{ docker_host }}"
      ca_cert: "{{ ca_cert }}"
      client_cert: "{{ client_cert }}"
      client_key: "{{ client_key }}"
      tls: true
      validate_certs: true
      project_src: "../docker/lemp_stack/"
      recreate: always
      dependencies: false
      services:
        - webserver
      state: present
    delegate_to: localhost
